{"version":3,"sources":["components/Navbar.tsx","components/JobTable.tsx","stubs/jobs.ts","pages/Jobs.tsx","components/RunTable.tsx","stubs/runs.ts","App.tsx","pages/Runs.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","links","className","style","height","display","alignItems","alt","verticalAlign","src","to","id","map","l","path","name","type","placeholder","JobRow","job","scope","repo","JobTable","jobs","paddingTop","jobsList","value","Jobs","RunRow","run","job_id","status","formatDistanceToNow","started","formatDistance","ended","includeSeconds","RunTable","runs","runsList","subMinutes","Date","now","Math","random","addMinutes","round","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6cf6e17c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {NavbarLink} from \"../types/navbar\";\r\n\r\nconst Navbar: React.FC<{\r\n    links: NavbarLink[]\r\n}> = ({links}) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div style={{height: 48, display: \"flex\", alignItems: \"center\"}}>\r\n                <img alt={\"bear\"} style={{height: 128, verticalAlign: \"middle\"}} src=\"/bear1.png\"/>\r\n            </div>\r\n            <Link className=\"navbar-brand\" to=\"/\">Kodiak</Link>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor03\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    {links.map(l => (\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to={l.path}>{l.name}</Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <form className=\"form-inline my-2 my-lg-0\">\r\n                    <input className=\"form-control mr-sm-2\" type=\"text\"\r\n                           placeholder=\"Search\"/>\r\n                    <button className=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {Job} from \"../types/job\";\r\n\r\nconst JobTable: React.FC<{ jobs: Job[] }> = ({jobs}) => {\r\n    return (<div style={{paddingTop: 32}} className={\"container\"}>\r\n        <table className=\"table table-hover\">\r\n            <thead>\r\n            <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">Name</th>\r\n                <th scope=\"col\">Repo</th>\r\n                <th scope=\"col\"/>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {jobs.map((job) => <JobRow job={job}/>)}\r\n            </tbody>\r\n        </table>\r\n    </div>)\r\n}\r\n\r\nconst JobRow: React.FC<{ job: Job }> = ({job}) => {\r\n    return (<tr>\r\n        <th scope=\"row\">{job.id}</th>\r\n        <td>{job.name}</td>\r\n        <td>{job.repo}</td>\r\n        <td>\r\n            <button className={\"btn btn-success\"}>Run</button>\r\n        </td>\r\n    </tr>)\r\n}\r\n\r\nexport default JobTable;","import {Job} from \"../types/job\";\r\n\r\nexport const jobsList: Job[] = [1, 2, 3, 4, 5, 6, 7, 8, 9].map((value => ({\r\n    id: value,\r\n    name: `Job #${value}`,\r\n    repo: `https://bitbucket.org/fxqlabs-oss/${value}`\r\n})));","import React from \"react\";\r\nimport JobTable from \"../components/JobTable\";\r\nimport {jobsList} from \"../stubs/jobs\";\r\n\r\nconst Jobs = () => {\r\n    return (\r\n        <>\r\n            <JobTable jobs={jobsList}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Jobs;","import React from 'react';\r\nimport {Run} from \"../types/run\";\r\nimport {formatDistance, formatDistanceToNow} from \"date-fns\";\r\n\r\nconst RunTable: React.FC<{ runs: Run[] }> = ({runs}) => {\r\n    return (<div style={{paddingTop: 32}} className={\"container\"}>\r\n        <table className=\"table table-hover\">\r\n            <thead>\r\n            <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">Job ID</th>\r\n                <th scope=\"col\">Status</th>\r\n                <th scope=\"col\">Started</th>\r\n                <th scope=\"col\">Duration</th>\r\n                <th scope=\"col\"/>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {runs.map((run) => <RunRow run={run}/>)}\r\n            </tbody>\r\n        </table>\r\n    </div>)\r\n}\r\n\r\nconst RunRow: React.FC<{ run: Run }> = ({run}) => {\r\n    return (<tr>\r\n        <th scope=\"row\">{run.id}</th>\r\n        <td>{run.job_id}</td>\r\n        <td>{run.status}</td>\r\n        <td>{`${formatDistanceToNow(run.started)} ago`}</td>\r\n        <td>{formatDistance(run.started, run.ended, {includeSeconds: true})}</td>\r\n        <td>\r\n            <button className={\"btn btn-success\"}>Action</button>\r\n        </td>\r\n    </tr>)\r\n}\r\n\r\nexport default RunTable;","import {Run} from \"../types/run\";\r\nimport {addMinutes, subMinutes} from 'date-fns'\r\n\r\nexport const runsList: Run[] = [1, 2, 3, 4, 5, 6, 7, 8, 9].map((value => {\r\n    const started = subMinutes(Date.now(), Math.random() * 100)\r\n    const ended = addMinutes(started, Math.random() * 10)\r\n\r\n    return {\r\n        id: value,\r\n        job_id: Math.round(Math.random() * 10),\r\n        started: started,\r\n        ended: ended,\r\n        status: 1\r\n    }\r\n}));","import React from 'react';\r\nimport './bootstrap.min.css'\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar\";\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Jobs from \"./pages/Jobs\";\r\nimport Runs from \"./pages/Runs\";\r\nimport {NavbarLink} from \"./types/navbar\";\r\n\r\nconst links: NavbarLink[] = [\r\n    {\r\n        name: \"Jobs\",\r\n        path: \"/jobs\",\r\n        component: Jobs\r\n    },\r\n    {\r\n        name: \"Runs\",\r\n        path: \"/runs\",\r\n        component: Runs\r\n    }\r\n]\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <Navbar links={links}/>\r\n                    <Switch>\r\n                        {links.map(l => (\r\n                            <Route path={l.path}>\r\n                                {l.component}\r\n                            </Route>\r\n                        ))}\r\n                    </Switch>\r\n                </header>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport RunTable from \"../components/RunTable\";\r\nimport {runsList} from \"../stubs/runs\";\r\n\r\nconst Runs = () => {\r\n    return (\r\n        <>\r\n            <RunTable runs={runsList}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Runs","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './bootstrap.min.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}